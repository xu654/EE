name: Dynamic Account Merge

on:
  issue_comment:
    types: [ created ]

  workflow_dispatch:
    inputs:
      comment:
        description: 'The comment to process'
        required: true
        default: ''

jobs:
  generate-list:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-list.outputs.list }}
      total: ${{ steps.generate-list.outputs.total }}
    steps:
      - name: Generate list and set as output
        id: generate-list
        run: |
          # Detect the event type and set JSON_DATA accordingly
          if [[ "$GITHUB_EVENT_NAME" == "issue_comment" ]]; then
            # Extract the body of the issue comment from the GitHub event JSON
            JSON_DATA=$(jq -r '.comment.body' "$GITHUB_EVENT_PATH")
          elif [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]]; then
            # Extract the input comment from the workflow dispatch event
            JSON_DATA=$(jq -r '.inputs.comment' "$GITHUB_EVENT_PATH")
          else
            # Exit the script if the event type is unsupported
            echo "Unsupported event type: $GITHUB_EVENT_NAME"
            exit 1
          fi
          
          # Count the number of keys in the JSON data
          NUM_KEYS=$(echo "$JSON_DATA" | jq 'keys | length')
          # Limit the number of keys to a maximum of 256, or use the actual number if less
          MAX_KEYS=$(echo "$NUM_KEYS" | jq '[. / 10, 256] | min | ceil')
          
          # Generate a compact JSON array of integers from 0 to MAX_KEYS-1
          LIST=$(jq -cn "[range($MAX_KEYS)]")
          
          # Output the list and total number of keys to the GitHub Actions output
          echo "list=$LIST" >> $GITHUB_OUTPUT
          echo "total=$MAX_KEYS" >> $GITHUB_OUTPUT

  validate-account:
    needs: generate-list
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 8
      matrix:
        index: ${{fromJson(needs.generate-list.outputs.matrix)}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1
        with:
          submodules: true
          fetch-depth: 0
          fetch-tags: true
          filter: blob:limit=100k

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: true

      - name: Restore serverlist
        uses: actions/cache/restore@v4
        with:
          path: servers.bin
          key: ${{ runner.os }}-servers-
          restore-keys: ${{ runner.os }}-servers-

      - name: Restore previous build
        uses: actions/cache@v4
        id: binaries
        with:
          path: |
            bin/
            obj/
          key: ${{ runner.os }}-bin-${{ github.sha }}

      - name: Build manifest downloader
        if: steps.binaries.outputs.cache-hit != 'true'
        run: dotnet build --configuration Release

      - name: Save comment to file
        run: |
          # Detect the event type and set JSON_DATA accordingly
          if [[ "$GITHUB_EVENT_NAME" == "issue_comment" ]]; then
            # Extract the body of the issue comment from the GitHub event JSON
            JSON_DATA=$(jq -r '.comment.body' "$GITHUB_EVENT_PATH")
          elif [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]]; then
            # Extract the input comment from the workflow dispatch event
            JSON_DATA=$(jq -r '.inputs.comment' "$GITHUB_EVENT_PATH")
          else
            # Exit the script if the event type is unsupported
            echo "Unsupported event type: $GITHUB_EVENT_NAME"
            exit 1
          fi
          
          echo "$JSON_DATA" > comment.txt

      - name: Validate account
        env:
          RSA_PRIVATE_KEY: |
            ${{ secrets.RSA_PRIVATE_KEY }}
        run: dotnet run --no-build --configuration Release -- account -a comment.txt -t ${{ secrets.GITHUB_TOKEN }} -i ${{ matrix.index }} -n ${{ needs.generate-list.outputs.total }} -k ${{ secrets.AES_KEY }}

      - name: Save serverlist
        uses: actions/cache/save@v4
        with:
          path: servers.bin
          key: ${{ runner.os }}-servers-${{ hashFiles('servers.bin') }}

